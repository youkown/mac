apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jetty'

defaultTasks = ['clean','jar','cleanEclipse','eclipse'] 

sourceCompatibility = 1.6
targetCompatibility = 1.6

project.ext {
	version = '1.0'
}

task ttt(type:Task) {
	println property("aaa.bbb")
}

eclipse {
	classpath {
		defaultOutputDir = file("build/eclipse/classes")
		file {
			withXml {
				def node = it.asNode()
				for (entry in node['classpathentry'].iterator()) {
					if (entry.'@kind' == 'lib') {
						def path = entry.'@path'
						if (configurations.providedCompile.find {it.path == path}) {
//							logger.info 'ProvidedCompile Lib Found:' + file(entry.'@path').name
//							entry.children().clear()
						} else 	if ((configurations.testCompile - configurations.compile).find {it.path == path}) {
//							logger.info 'TestCompile Lib Found:' + file(entry.'@path').name
//							entry.children().clear()
						} else {
							logger.info 'Export Entry: ' + entry.@path
							entry.appendNode('attributes').appendNode('attribute', [
								'name': 'org.eclipse.jst.component.dependency', 'value': '../'
							])
						}
					}
				}
			}
		}
	}
	project {
		name = 'SinoNetFramework'
		natures 'org.eclipse.wst.common.project.facet.core.nature'
		natures 'org.eclipse.wst.common.modulecore.ModuleCoreNature'
		natures 'org.eclipse.jem.workbench.JavaEMFNature'
		buildCommand 'org.eclipse.wst.common.project.facet.core.builder'
		buildCommand 'org.eclipse.wst.validation.validationbuilder'
		file {
			whenMerged {
				file('.settings/org.eclipse.wst.common.component').withPrintWriter {
					it.println '<?xml version="1.0" encoding="UTF-8"?>'
					it.println '<project-modules id="moduleCoreId" project-version="1.5">'
					it.println '	<wb-module deploy-name="SinoNetFramework">'
					it.println '		<wb-resource deploy-path="/" source-path="/src/main/java"/>'
					it.println '		<wb-resource deploy-path="/" source-path="/src/main/resources"/>'
					it.println '	</wb-module>'
					it.println '</project-modules>'
				}
				file('.settings/org.eclipse.wst.common.project.facet.core.xml').withPrintWriter {
					it.println '<?xml version="1.0" encoding="UTF-8"?>'
					it.println '<faceted-project>'
					it.println '	<fixed facet="java"/>'
					it.println '	<fixed facet="jst.utility"/>'
					it.println '	<installed facet="java" version="1.6"/>'
					it.println '	<installed facet="jst.utility" version="1.0"/>'
					it.println '</faceted-project>'
				}
			}
		}
	}
	/*
	wtp {
		component {
			file {
				withXml { 
					def Node node = it.asNode()
					node.'@project-version' = '1.5'
					for (wb in node.'wb-module') {
						wb.children().clear();
						wb.appendNode('wb-resource',['deploy-path':'/','source-path':'/src/main/java'])
						wb.appendNode('wb-resource',['deploy-path':'/','source-path':'/src/main/resources'])
					}
				}
			}
		}
		facet {
			facet type: 'fixed', name: 'java', version: '1.6'
			facet type: 'fixed', name: 'jst.utility', version: '1.0'
			facet name: 'java', version: '1.6'
			facet name: 'jst.utility', version: '1.0'
		}
	}
	*/
}

sourceSets {
		main {
			java {
				srcDir 'src/main/java'
				exclude '**/.svn/**'
			}
			resources {
				srcDir 'src/main/resources'
				exclude '**/.svn/**'
			}
		}
}

[compileJava, compileTestJava]*.options.collect { options -> 
	options.encoding = 'UTF-8'
}

repositories {
	//maven {	url "http://localhost:8081/nexus/content/groups/public/" }
}


dependencies {
	providedCompile "javax.servlet.jsp:jsp-api:2.2"
	providedCompile "javax.servlet:javax.servlet-api:$servletApiVersion"
	testCompile "junit:junit:$junitVersion"
	testCompile "org.springframework:spring-test:$springVersion"
	compile files('lib/jar/jdbc/ojdbc6.jar')
	compile files('lib/jar/jdbc/mysql-connector-java-5.1.25-bin.jar')
	
	compile "commons-fileupload:commons-fileupload:1.3"
	compile "org.apache.httpcomponents:httpclient:4.2.5"
	compile "org.apache.httpcomponents:httpmime:4.2.5"
	compile "commons-beanutils:commons-beanutils-core:1.8.3"
	compile "org.apache.commons:commons-lang3:3.1"
	compile "com.alibaba:fastjson:1.1.31"
	compile "commons-pool:commons-pool:$commonsPoolVersion"
	compile "commons-codec:commons-codec:$commonsCodecVersion"
	compile "org.springframework:spring-orm:$springVersion"
	compile "org.springframework:spring-context:$springVersion"
	compile "org.springframework:spring-context-support:$springVersion"
	compile "org.springframework:spring-web:$springVersion"
	compile "org.springframework:spring-core:$springVersion"
	compile "org.springframework.security:spring-security-core:$springSecurityVersion"
	compile "org.springframework.security:spring-security-crypto:$springSecurityVersion"
	
	compile "org.hibernate:hibernate-core:$hibernateVersion"
	compile "org.slf4j:slf4j-api:$slf4jVersion"
	runtime "org.slf4j:slf4j-log4j12:$slf4jVersion"
	compile "org.activiti:activiti-engine:$activitiVersion"
	compile "org.activiti:activiti-spring:$activitiVersion"
	
	compile "org.freemarker:freemarker:2.3.19"
	compile "org.codehaus.jackson:jackson-core-asl:1.9.12"
	compile "org.codehaus.jackson:jackson-mapper-asl:1.9.12"
	compile "net.sf.json-lib:json-lib:2.4:jdk15"
	compile 'jaxen:jaxen:1.1.4'
}

